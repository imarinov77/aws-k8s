- hosts: all
  become: true
  vars:
    k8s_version: 1.28.2-00
    cilium_version: 1.15.1
  tasks:
    #- name: Update and upgrade apt packages
    #  apt:
    #    upgrade: yes
    #    update_cache: yes

    - name: Configure nfs server
      block:
        - name: Install required system packages for nfs server
          apt:
            name: nfs-kernel-server
            state: latest
            update_cache: yes

        - name: Set a hostname
          hostname:
            name: k8s-nfs.aws
            use: systemd

        - name: Create data dir for nfs
          file:
            path: /data
            state: directory

        - name: Add data dir to exports
          lineinfile:
            path: /etc/exports
            state: present
            line: "{{ item }}"
          loop:
            - "/data  *(rw,no_root_squash,no_subtree_check,insecure)"

        - name: Restart nfs-kernel-server.service
          systemd:
            daemon_reload: yes
            state: restarted
            name: nfs-kernel-server.service

        #Extra tmp task for eks manage
        #- shell: 'sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg && echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list && sudo apt-get update -y && sudo apt-get install -y kubectl=1.23.1-00 && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && sudo apt-get install unzip -y && unzip awscliv2.zip && sudo ./aws/install'

      when: inventory_hostname == 'k8s-nfs'

    - name: Prepare k8s cluster nodes
      block:
        - name: Install required system packages
          apt:
            name: "{{ item }}"
            state: latest
            update_cache: yes
          loop:
            [
              "apt-transport-https",
              "bash-completion",
              "software-properties-common",
              "mc",
              "vim",
              "net-tools",
              "nfs-common",
            ]

        - name: Stop ufw
          systemd:
            name: ufw
            enabled: no
            state: stopped

        - name: Add kernel modules
          modprobe:
            name: "{{ item }}"
            state: present
          loop: ["overlay", "br_netfilter"]

        - name: Copy cri.conf
          copy:
            src: 99-kubernetes-cri.conf
            dest: /etc/sysctl.d/99-kubernetes-cri.conf
            owner: root

        - name: Apply new config file
          shell: "sysctl --system"
          register: sysctl_output

        - debug:
            msg: "{{ sysctl_output }}"

        - name: Add cri-o,libcontainer,k8s apt gpg keys
          apt_key:
            url: "{{ item }}"
            state: present
          loop:
            - "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.28/xUbuntu_22.04/Release.key"
            - "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/Release.key"
            - "https://packages.cloud.google.com/apt/doc/apt-key.gpg"

        - name: Add cri-o,libcontainer,k8s repositories
          apt_repository:
            repo: "{{ item }}"
            state: present
          loop:
            - "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/ /"
            - "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.28/xUbuntu_22.04/ /"
            - "deb http://apt.kubernetes.io/ kubernetes-xenial main"

        - name: Update apt and install cri-o and cri-o-runc
          apt:
            update_cache: yes
            name: "{{ item }}"
            state: latest
          loop: ["cri-o", "cri-o-runc"]

        - name: Start crio
          service:
            name: crio
            state: started

        - name: Enable cri-o
          service:
            name: crio
            enabled: yes

        - name: Update apt and install k8s
          apt:
            update_cache: yes
            name: "{{ item }}={{ k8s_version }}"
            state: present
            force: yes
          loop: ["kubeadm", "kubelet", "kubectl"]
      when: inventory_hostname == 'k8s-master' or inventory_hostname in groups['k8s-worker']

    - name: Configure master node
      block:
        - name: Update hosts file
          lineinfile:
            dest: /etc/hosts
            line: "{{ item }}"
            state: present
          loop:
            - "{{ ansible_default_ipv4.address }} k8s-master"
            - "{{ hostvars['k8s-nfs']['ansible_default_ipv4']['address'] }} k8s-nfs"

        - name: Set a hostname
          hostname:
            name: k8s-master.aws
            use: systemd

        - name: Copy kubeadm-config and kubeadm-crio
          copy:
            src: "{{ item }}"
            dest: /root
            owner: root
          loop: ["kubeadm-config.yaml"]

        - name: Initializing master
          shell: kubeadm init --config=/root/kubeadm-config.yaml --upload-certs | tee /root/kubeadm-init.out
          register: kubeadm_output

        - debug:
            msg: "{{ kubeadm_output }}"

        - name: Create a directory if it does not exist
          file:
            path: /home/ubuntu/.kube
            state: directory
            owner: ubuntu

        - name: Copy kubectl config
          copy:
            src: /etc/kubernetes/admin.conf
            dest: /home/ubuntu/.kube/config
            owner: ubuntu
            mode: 0600
            remote_src: yes

        - name: Set kubectl bash-completion
          shell: echo 'source <(kubectl completion bash)' >>/home/ubuntu/.bashrc

        - name: Install cilium
          shell: |
            CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
            CLI_ARCH=amd64
            if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
            curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
            sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
            sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
            cilium install --version {{ cilium_version }}
          become_user: ubuntu

        - name: Add helm gpg keys
          apt_key:
            url: "https://baltocdn.com/helm/signing.asc"
            state: present

        - name: Add helm repo
          apt_repository:
            repo: "deb https://baltocdn.com/helm/stable/debian/ all main"
            state: present

        - name: Update apt and install helm
          apt:
            update_cache: yes
            name: helm
            state: present
        
        - name: Add kubectl alias to .bashrc
          lineinfile:
            path: ~/.bashrc
            line: 'alias k=kubectl'
            insertafter: EOF
            state: present

        - name: Add kubectl completion to .bashrc
          lineinfile:
            path: ~/.bashrc
            line: 'complete -F __start_kubectl k'
            insertafter: EOF
            state: present

      when: inventory_hostname == 'k8s-master'

    - name: Generate token from master
      shell: kubeadm token create
      delegate_to: k8s-master
      run_once: true
      register: token

    - name: Get cert hash
      shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst \-sha256 -hex | sed 's/^.* //'
      delegate_to: k8s-master
      run_once: true
      register: hash

    - name: Configure worker nodes
      block:
        - name: Update hosts file - add master and nfs server
          lineinfile:
            dest: /etc/hosts
            line: "{{ item }}"
            state: present
          loop:
            - "{{ hostvars['k8s-master']['ansible_default_ipv4']['address'] }} k8s-master"
            - "{{ hostvars['k8s-nfs']['ansible_default_ipv4']['address'] }} k8s-nfs"
            - "{{ ansible_default_ipv4.address }} {{ inventory_hostname }}"

        - name: Set a hostname
          hostname:
            name: "{{ inventory_hostname }}.aws"
            use: systemd

        - name: Join cluster
          shell: 'kubeadm join --token "{{ token.stdout }}" k8s-master:6443  --discovery-token-ca-cert-hash sha256:"{{ hash.stdout }}"'
          register: join_cluster_output

        - debug:
            msg: "{{ join_cluster_output }}"

      when: inventory_hostname in groups['k8s-worker']
